fun iterator(list:List<Int>,vararg map:String) {  //vararg allows us to specify the variable of whatever
    //type means that even if we are not going to pass anything as argument we would not encounter an error
	list.forEachIndexed()
    {
        index,value->println("$index  $value")
    }
    
    if(!map.isEmpty())
    {
    println("map is not empty")
    map.forEach(){
        value->println("-> $value")
    }
    }
    else
    {
        println("map is empty")
    }
    
}


fun main()
{
    val list= mutableListOf(1,2,3,4,5,6)
	list.add(100)
    
    val map= arrayOf("Aman","Nawal","Priya","Nothing")
	
    iterator(list,*map)   //spread operator
}


//another example of Vararg


open class parent(vararg val name:String)

class child1:parent("Aman Nawal","Priya Nawal")      //if the child class is inheriting a parent 
//class then the values in the constructor of the parent class would also get passed to the child class 
//every class inherits a toString function and we can override that function to make it return an string only
//here we passed the parent constructor values to the child toString values and ade the return to the main function
{
    override fun toString():String{
        return name.joinToString() 
    }
}

class child2:parent("Priya nawal","Aman nawal")
{
    override fun toString():String
    {
        return name.joinToString()
    }
}
